import React from 'react';
import ReactDOM from 'react-dom';
import Web3 from 'web3';

import registerServiceWorker from './registerServiceWorker';
import Root from './templates/root.js';
import './css/index.css';

document.addEventListener('DOMContentLoaded', () => {
  var web3;
  var userLoggedIn;
  if (typeof window.web3 !== 'undefined') {
      web3 = new Web3(window.web3.currentProvider);
  } else {
      web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
  }

  // TODO(mikebarile): Update this ABI once we've finalized the contract.
  var kryptomonABI = [{constant:!0,inputs:[],name:"name",outputs:[{name:"_name",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_sendTo",type:"address"},{name:"_numEggs",type:"uint256"}],name:"assignReserveEggs",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_to",type:"address"},{name:"_tokenId",type:"uint256"}],name:"approve",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_speciesId",type:"uint256"}],name:"setSpeciesExtinct",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"totalSupply",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"",type:"uint256"}],name:"eggIndexToOwner",outputs:[{name:"",type:"address"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_eggId",type:"uint256"}],name:"hatchEgg",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_from",type:"address"},{name:"_to",type:"address"},{name:"_tokenId",type:"uint256"}],name:"transferFrom",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"price",type:"uint256"}],name:"setGenZeroEggPrice",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_condition",type:"bool"}],name:"setHatchingPaused",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_to",type:"address"},{name:"_tokenId",type:"uint256"}],name:"eggTransfer",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_tokenId",type:"uint256"}],name:"eggOwnerOf",outputs:[{name:"",type:"address"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"hatchingPaused",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"totalEggSupply",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_sireIndex",type:"uint256"},{name:"_matronIndex",type:"uint256"}],name:"breedKryptomon",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_to",type:"address"},{name:"_tokenId",type:"uint256"}],name:"eggApprove",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_numEggs",type:"uint256"}],name:"buyGenZeroEggs",outputs:[],payable:!0,stateMutability:"payable",type:"function"},{constant:!1,inputs:[{name:"_condition",type:"bool"}],name:"setGenZeroPaused",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[],name:"withdrawBalance",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_tokenId",type:"uint256"}],name:"ownerOf",outputs:[{name:"",type:"address"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_owner",type:"address"}],name:"eggBalanceOf",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_owner",type:"address"}],name:"balanceOf",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"genZeroPaused",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"",type:"uint256"}],name:"kryptomonIndexToApproved",outputs:[{name:"",type:"address"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"breedingPaused",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"",type:"uint256"}],name:"eggIndexToApproved",outputs:[{name:"",type:"address"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_attack",type:"uint256"},{name:"_defense",type:"uint256"},{name:"_specialAttack",type:"uint256"},{name:"_specialDefense",type:"uint256"},{name:"_hitPoints",type:"uint256"},{name:"_speed",type:"uint256"},{name:"_maxChildren",type:"uint256"},{name:"_breedingCooldown",type:"uint256"},{name:"_evolveToId",type:"uint256"},{name:"_timeToEvolve",type:"uint256"},{name:"_rarity",type:"uint256"}],name:"addSpeciesId",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"symbol",outputs:[{name:"_symbol",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_to",type:"address"},{name:"_tokenId",type:"uint256"}],name:"transfer",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"completeFreeze",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_kryptomonId",type:"uint256"}],name:"getKryptomon",outputs:[{name:"speciesId",type:"uint256"},{name:"geneticValue",type:"uint256"},{name:"generation",type:"uint256"},{name:"birthTimeStamp",type:"uint256"},{name:"breedingCooldown",type:"uint256"},{name:"numChildren",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_condition",type:"bool"}],name:"setCompleteFreeze",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"",type:"address"}],name:"ownerToTotalEggs",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"kryptoGodAddress",outputs:[{name:"",type:"address"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_speciesId",type:"uint256"}],name:"setSpeciesNotExtinct",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_address",type:"address"}],name:"getKryptomonIdsForAddress",outputs:[{name:"kryptomonIds",type:"uint256[]"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_newKryptoGod",type:"address"}],name:"setNewKryptoGod",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_from",type:"address"},{name:"_to",type:"address"},{name:"_tokenId",type:"uint256"}],name:"eggTransferFrom",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"",type:"uint256"}],name:"kryptomonIndexToOwner",outputs:[{name:"",type:"address"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"",type:"address"}],name:"ownerToTotalKryptomon",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_kryptomonId",type:"uint256"}],name:"evolve",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_condition",type:"bool"}],name:"setBreedingPaused",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_eggId",type:"uint256"}],name:"getEgg",outputs:[{name:"generation",type:"uint256"},{name:"geneticPredisposition",type:"uint256"},{name:"matronSpeciesId",type:"uint256"},{name:"sireSpeciesId",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{inputs:[],payable:!1,stateMutability:"nonpayable",type:"constructor"},{payable:!0,stateMutability:"payable",type:"fallback"},{anonymous:!1,inputs:[{indexed:!1,name:"_sireIndex",type:"uint256"},{indexed:!1,name:"_matronIndex",type:"uint256"},{indexed:!1,name:"_owner",type:"address"}],name:"KryptomonBred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,name:"_from",type:"address"},{indexed:!1,name:"_to",type:"address"},{indexed:!1,name:"_tokenId",type:"uint256"}],name:"EggTransfer",type:"event"},{anonymous:!1,inputs:[{indexed:!1,name:"_owner",type:"address"},{indexed:!1,name:"_approved",type:"address"},{indexed:!1,name:"_tokenId",type:"uint256"}],name:"EggApproval",type:"event"},{anonymous:!1,inputs:[{indexed:!1,name:"_from",type:"address"},{indexed:!1,name:"_to",type:"address"},{indexed:!1,name:"_tokenId",type:"uint256"}],name:"Transfer",type:"event"},{anonymous:!1,inputs:[{indexed:!1,name:"_owner",type:"address"},{indexed:!1,name:"_approved",type:"address"},{indexed:!1,name:"_tokenId",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!1,name:"buyerId",type:"address"}],name:"GenZeroEggHatched",type:"event"},{anonymous:!1,inputs:[{indexed:!1,name:"ownerAddress",type:"address"},{indexed:!1,name:"eggId",type:"uint256"}],name:"EggHatched",type:"event"},{anonymous:!1,inputs:[{indexed:!1,name:"ownerAddress",type:"address"},{indexed:!1,name:"kryptomonId",type:"uint256"}],name:"KryptomonAssigned",type:"event"},{anonymous:!1,inputs:[{indexed:!1,name:"ownerAddress",type:"address"},{indexed:!1,name:"eggId",type:"uint256"}],name:"EggAssigned",type:"event"},{anonymous:!1,inputs:[{indexed:!1,name:"ownerAddress",type:"address"},{indexed:!1,name:"kryptomonId",type:"uint256"}],name:"KryptomonEvolved",type:"event"},{anonymous:!1,inputs:[{indexed:!1,name:"speciesId",type:"uint256"}],name:"SpeciesIdAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!1,name:"speciesId",type:"uint256"}],name:"SpeciesSetExtinct",type:"event"},{anonymous:!1,inputs:[{indexed:!1,name:"speciesId",type:"uint256"}],name:"SpeciesSetNotExtinct",type:"event"}];

  // TODO(mikebarile): Update this address once we've finalized the contract.
  var kryptomonAddress = '0x1036bf5913263819310401b98180c7dcec19859c';

  var kryptomon = web3.eth.contract(kryptomonABI).at(kryptomonAddress);
  window.ethProcessor = (err, resp) => {
      console.log(err);
      console.log(resp);
  };

  // Default kryptomon's default account to first MetaMask account (KryptoGod)
  console.log(web3.eth.accounts[0]);
  kryptomon._eth.defaultAccount = web3.eth.accounts[0];

  window.kryptomonABI = kryptomonABI;
  window.kryptomonAddress = kryptomonAddress;
  window.kryptomon = kryptomon;

  window.account = web3.eth.accounts[0];
  setInterval(() => {
    if (web3.eth.accounts[0] !== window.account) {
      window.account = web3.eth.accounts[0];
    }
  }, 500);

  ReactDOM.render(<Root />, document.getElementById('root'));
  registerServiceWorker();
});
